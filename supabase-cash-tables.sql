-- Cash & Banks core tables
-- Run in Supabase SQL Editor

-- 1) Cash accounts (kasa ve banka hesapları)
create table if not exists public.cash_accounts (
  id uuid primary key default gen_random_uuid(),
  owner_id uuid not null,
  type text not null check (type in ('cash','bank')),
  name text not null,
  iban text,
  currency text not null default 'TRY',
  balance numeric(18,2) not null default 0,
  notes text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create index if not exists idx_cash_accounts_owner on public.cash_accounts(owner_id);
create index if not exists idx_cash_accounts_type on public.cash_accounts(type);

-- 2) Cash transactions (para giriş/çıkış ve transfer kayıtları)
create table if not exists public.cash_transactions (
  id bigint generated by default as identity primary key,
  owner_id uuid not null,
  account_id uuid not null references public.cash_accounts(id) on delete cascade,
  trx_type text not null check (trx_type in ('in','out','transfer_in','transfer_out')),
  amount numeric(18,2) not null check (amount >= 0),
  currency text not null default 'TRY',
  trx_date date not null default current_date,
  description text,
  counterparty text,
  reference_no text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create index if not exists idx_cash_trx_owner on public.cash_transactions(owner_id);
create index if not exists idx_cash_trx_account on public.cash_transactions(account_id);
create index if not exists idx_cash_trx_date on public.cash_transactions(trx_date);
create index if not exists idx_cash_trx_type on public.cash_transactions(trx_type);

-- 3) updated_at trigger
create or replace function public.set_timestamp() returns trigger as $$
begin new.updated_at = now(); return new; end; $$ language plpgsql;

drop trigger if exists set_timestamp_cash_accounts on public.cash_accounts;
create trigger set_timestamp_cash_accounts before update on public.cash_accounts
for each row execute procedure public.set_timestamp();

drop trigger if exists set_timestamp_cash_transactions on public.cash_transactions;
create trigger set_timestamp_cash_transactions before update on public.cash_transactions
for each row execute procedure public.set_timestamp();

-- 3.b) Optional helper: set owner_id from Supabase Auth automatically on INSERT (if not provided)
create or replace function public.cash_set_owner_from_auth()
returns trigger as $$
begin
  if new.owner_id is null and auth.uid() is not null then
    new.owner_id := auth.uid();
  end if;
  return new;
end;
$$ language plpgsql security definer;

drop trigger if exists set_owner_from_auth_cash_accounts on public.cash_accounts;
create trigger set_owner_from_auth_cash_accounts
before insert on public.cash_accounts
for each row execute procedure public.cash_set_owner_from_auth();

drop trigger if exists set_owner_from_auth_cash_transactions on public.cash_transactions;
create trigger set_owner_from_auth_cash_transactions
before insert on public.cash_transactions
for each row execute procedure public.cash_set_owner_from_auth();

-- 4) RLS
alter table public.cash_accounts enable row level security;
alter table public.cash_transactions enable row level security;

do $$ begin
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='cash_accounts' and policyname='cash_accounts select own'
  ) then
    create policy "cash_accounts select own" on public.cash_accounts for select using (owner_id = auth.uid());
  end if;
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='cash_accounts' and policyname='cash_accounts modify own'
  ) then
    create policy "cash_accounts modify own" on public.cash_accounts for all using (owner_id = auth.uid()) with check (owner_id = auth.uid());
  end if;

  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='cash_transactions' and policyname='cash_trx select own'
  ) then
    create policy "cash_trx select own" on public.cash_transactions for select using (owner_id = auth.uid());
  end if;
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='cash_transactions' and policyname='cash_trx modify own'
  ) then
    create policy "cash_trx modify own" on public.cash_transactions for all using (owner_id = auth.uid()) with check (owner_id = auth.uid());
  end if;
end $$;

-- 5) RPCs for balance-safe updates
create or replace function public.cash_in(p_account uuid, p_amount numeric, p_desc text, p_date date, p_owner uuid default null)
returns void language plpgsql security definer as $$
begin
  if p_amount is null or p_amount <= 0 then return; end if;
  update public.cash_accounts set balance = coalesce(balance,0) + p_amount
  where id = p_account and owner_id = coalesce(auth.uid(), p_owner);
  insert into public.cash_transactions(owner_id, account_id, trx_type, amount, trx_date, description)
  values(coalesce(auth.uid(), p_owner), p_account, 'in', p_amount, coalesce(p_date,current_date), p_desc);
end; $$;

create or replace function public.cash_out(p_account uuid, p_amount numeric, p_desc text, p_date date, p_owner uuid default null)
returns void language plpgsql security definer as $$
begin
  if p_amount is null or p_amount <= 0 then return; end if;
  update public.cash_accounts set balance = greatest(coalesce(balance,0) - p_amount, 0)
  where id = p_account and owner_id = coalesce(auth.uid(), p_owner);
  insert into public.cash_transactions(owner_id, account_id, trx_type, amount, trx_date, description)
  values(coalesce(auth.uid(), p_owner), p_account, 'out', p_amount, coalesce(p_date,current_date), p_desc);
end; $$;

create or replace function public.cash_transfer(p_from uuid, p_to uuid, p_amount numeric, p_desc text, p_date date, p_owner uuid default null)
returns void language plpgsql security definer as $$
begin
  if p_amount is null or p_amount <= 0 then return; end if;
  -- same owner guard
  update public.cash_accounts set balance = greatest(coalesce(balance,0) - p_amount, 0)
  where id = p_from and owner_id = coalesce(auth.uid(), p_owner);
  update public.cash_accounts set balance = coalesce(balance,0) + p_amount
  where id = p_to and owner_id = coalesce(auth.uid(), p_owner);
  insert into public.cash_transactions(owner_id, account_id, trx_type, amount, trx_date, description)
  values(coalesce(auth.uid(), p_owner), p_from, 'transfer_out', p_amount, coalesce(p_date,current_date), p_desc);
  insert into public.cash_transactions(owner_id, account_id, trx_type, amount, trx_date, description)
  values(coalesce(auth.uid(), p_owner), p_to, 'transfer_in', p_amount, coalesce(p_date,current_date), p_desc);
end; $$;

revoke all on function public.cash_in(uuid, numeric, text, date, uuid) from public;
revoke all on function public.cash_out(uuid, numeric, text, date, uuid) from public;
revoke all on function public.cash_transfer(uuid, uuid, numeric, text, date, uuid) from public;
grant execute on function public.cash_in(uuid, numeric, text, date, uuid) to anon, authenticated;
grant execute on function public.cash_out(uuid, numeric, text, date, uuid) to anon, authenticated;
grant execute on function public.cash_transfer(uuid, uuid, numeric, text, date, uuid) to anon, authenticated;

notify pgrst, 'reload schema';

-- 6) DEV-ONLY (optional): Relax RLS for anon role
do $$ begin
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='cash_accounts' and policyname='cash_accounts anon select (dev)'
  ) then
    create policy "cash_accounts anon select (dev)" on public.cash_accounts for select to anon using (true);
  end if;
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='cash_accounts' and policyname='cash_accounts anon insert (dev)'
  ) then
    create policy "cash_accounts anon insert (dev)" on public.cash_accounts for insert to anon with check (true);
  end if;
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='cash_accounts' and policyname='cash_accounts anon update (dev)'
  ) then
    create policy "cash_accounts anon update (dev)" on public.cash_accounts for update to anon using (true) with check (true);
  end if;
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='cash_accounts' and policyname='cash_accounts anon delete (dev)'
  ) then
    create policy "cash_accounts anon delete (dev)" on public.cash_accounts for delete to anon using (true);
  end if;

  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='cash_transactions' and policyname='cash_trx anon select (dev)'
  ) then
    create policy "cash_trx anon select (dev)" on public.cash_transactions for select to anon using (true);
  end if;
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='cash_transactions' and policyname='cash_trx anon insert (dev)'
  ) then
    create policy "cash_trx anon insert (dev)" on public.cash_transactions for insert to anon with check (true);
  end if;
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='cash_transactions' and policyname='cash_trx anon update (dev)'
  ) then
    create policy "cash_trx anon update (dev)" on public.cash_transactions for update to anon using (true) with check (true);
  end if;
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='cash_transactions' and policyname='cash_trx anon delete (dev)'
  ) then
    create policy "cash_trx anon delete (dev)" on public.cash_transactions for delete to anon using (true);
  end if;
end $$;
